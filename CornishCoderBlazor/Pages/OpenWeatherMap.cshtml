@page "/openweathermap"
@inject HttpClient Http
@using Microsoft.AspNetCore.Blazor.Browser.Interop
@using System.Runtime.Serialization
@using System.Runtime.Serialization.Json
@using System.Text
@using System.IO


<h1>OpenWeatherMap Forecast</h1>

<p>This component demonstrates Blazor js interop by fetching data with a jsonP call to OpenWeatherMap API.</p>

<table>
    <tr>
        <td>
            <Label>City:</Label>
        </td>
        <td>
            <input type="text" bind="@city" />
        </td>
    </tr>
    <tr>
        <td>
            <Label>Api Key:</Label>
        </td>
        <td>
            <input type="text" bind="@apiKey" />
        </td>
    </tr>
    <tr>
        <td></td>
        <td>
            <button class="btn btn-primary" onclick="@OnClick">Get Forecast</button>
        </td>
    </tr>
</table>


@if (Forecasts.Count() == 0)
{
    <p><em>Please enter City and OpenWeatherMap Api Key...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date and Time</th>
                <th>Temp. (C)</th>
                <th>Wind Speed</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in Forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToString("dddd d MMMM  HH:mm")</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.WindSpeed</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@functions {
    protected List<WeatherForecast> Forecasts { get; } = new List<WeatherForecast>();
    string city;
    string apiKey;

    protected async void OnClick()
    {
        Forecasts.Clear();

        var url = $"https://api.openweathermap.org/data/2.5/forecast?APPID={apiKey}&q={city}&units=metric";
        var data = await RegisteredFunction.InvokeAsync<string>("jsonP", url);
        var serializer = new DataContractJsonSerializer(typeof(RootObject));

        using (var ms = new MemoryStream(Encoding.UTF8.GetBytes(data)))
        {
            var rootObject = serializer.ReadObject(ms) as RootObject;
            foreach (var entry in rootObject.list)
            {
                var f = new WeatherForecast()
                {
                    Date = DateTime.Parse(entry.dt_txt),
                    TemperatureC = entry.main.temp,
                    WindSpeed = entry.wind.speed,
                    Summary = entry.weather.Single().description
                };
                Forecasts.Add(f);
            }
            this.StateHasChanged();
        }
    }

    public class WeatherForecast
    {
        public DateTime Date { get; set; }
        public double TemperatureC { get; set; }
        public double WindSpeed { get; set; }
        public string Summary { get; set; }
    }

    // OpenWeatherApi weather api response classes
    public class Main
    {
        public double temp { get; set; }
        public double temp_min { get; set; }
        public double temp_max { get; set; }
        public double pressure { get; set; }
        public double sea_level { get; set; }
        public double grnd_level { get; set; }
        public int humidity { get; set; }
        public double temp_kf { get; set; }
    }

    public class Weather
    {
        public int id { get; set; }
        public string main { get; set; }
        public string description { get; set; }
        public string icon { get; set; }
    }

    public class Clouds
    {
        public int all { get; set; }
    }

    public class Wind
    {
        public double speed { get; set; }
        public double deg { get; set; }
    }

    public class Sys
    {
        public string pod { get; set; }
    }

    public class List
    {
        public int dt { get; set; }
        public Main main { get; set; }
        public List<Weather> weather { get; set; }
        public Clouds clouds { get; set; }
        public Wind wind { get; set; }
        public Sys sys { get; set; }
        public string dt_txt { get; set; }
    }

    public class Coord
    {
        public double lat { get; set; }
        public double lon { get; set; }
    }

    public class City
    {
        public int id { get; set; }
        public string name { get; set; }
        public Coord coord { get; set; }
        public string country { get; set; }
        public int population { get; set; }
    }

    public class RootObject
    {
        public string cod { get; set; }
        public double message { get; set; }
        public int cnt { get; set; }
        public List<List> list { get; set; }
        public City city { get; set; }
    }
}
